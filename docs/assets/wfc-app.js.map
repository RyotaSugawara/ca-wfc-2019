{"version":3,"file":"wfc-app.js","sources":["../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../src/wfc-header.js","../../src/wfc-loading.js","../../src/wfc-photo-image.js","../../src/wfc-photo-item.js","../../src/wfc-photo-list.js","../../src/wfc-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                // tslint:disable-next-line:no-any no symbol in index\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this.requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure connection triggers an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // if we have a property key, perform property update steps.\n        if (name !== undefined && !this._changedProperties.has(name)) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                // track old value when changing.\n                this._changedProperties.set(name, oldValue);\n                // add to reflecting properties set\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n                // abort the request if the property should not be considered changed.\n            }\n            else {\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res) => resolve = res);\n        // Ensure any previous update has resolved before updating.\n        // This `await` also ensures that property changes are batched.\n        await previousUpdatePromise;\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        // Allow `performUpdate` to be asynchronous to enable scheduling of updates.\n        const result = this.performUpdate();\n        // Note, this is to avoid delaying an additional microtask unless we need\n        // to.\n        if (result != null &&\n            typeof result.then === 'function') {\n            await result;\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update.\n     *\n     * You can override this method to change the timing of updates. For instance,\n     * to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {LitElement, html, css} from 'lit-element';\n\nclass WfcHeader extends LitElement {\n  static get styles() {\n    return css`\n      div {\n        height: 44px;\n      }\n      header {\n        width: 100%;\n        height: 44px;\n        line-height: 44px;\n        background: #fff;\n        border-bottom: 1px solid #00000019;\n        position: fixed;\n        z-index: 100;\n      }\n      h1 {\n        font-weight: 100;\n        text-align: center;\n        margin: 0;\n        font-size: 18px;\n      }\n    `;\n  }\n  render() {\n    return html`\n      <div>\n        <header><h1>CA WFC 2019 - Photo Viewer</h1></header>\n      </div>\n    `;\n  }\n}\n\nwindow.customElements.define('wfc-header', WfcHeader);\n","import {LitElement, html, css} from 'lit-element';\n\nclass WfcLoading extends LitElement {\n  static get styles() {\n    return css`\n    :host {\n      display: block;\n      text-align: center;\n      line-height: 44px;\n      height: 44px;\n    }\n    svg {\n      display: inline-block;\n    }\n    svg path,\n    svg rect{\n      fill: #58B8EF;\n    }\n    `;\n  }\n\n  render() {\n    return html`\n      <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n        width=\"40px\" height=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">\n        <path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946\n          s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634\n          c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"/>\n        <path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0\n          C22.32,8.481,24.301,9.057,26.013,10.047z\">\n          <animateTransform attributeType=\"xml\"\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 20 20\"\n            to=\"360 20 20\"\n            dur=\"0.5s\"\n            repeatCount=\"indefinite\"/>\n        </path>\n      </svg>\n    `;\n  }\n}\n\nwindow.customElements.define('wfc-loading', WfcLoading);\n","import {LitElement, html, css} from 'lit-element';\n\nclass WfcPhotoImage extends LitElement {\n  static get properties() {\n    return {\n      color: {type: String},\n      width: {type: String},\n      height: {type: String},\n      src: {type: String},\n      alt: {type: String},\n      inviewed: {type: Boolean},\n      loaded: {type: Boolean},\n    };\n  }\n\n  static get styles() {\n    return css`\n      .content {\n        position: relative;\n      }\n      .placeholder {\n        width: 100%;\n      }\n      .image {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        opacity: 0;\n        transition: all 0.5s ease;\n      }\n      [data-loaded='true'] {\n        opacity: 1;\n      }\n    `;\n  }\n\n  constructor() {\n    super();\n    this.loaded = false;\n    this.inviewed = false;\n    this.unobserve = null;\n  }\n\n  handleLoad() {\n    this.loaded = true;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        this.inviewed = true;\n        this.unobserve && this.unobserve();\n      }\n    });\n    observer.observe(this);\n    this.unobserve = () => {\n      observer.disconnect();\n      this.unobserve = null;\n    };\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.unobserve && this.unobserve();\n  }\n\n  render() {\n    return html`\n      <div class=\"content\" style=\"width:${this.width};\">\n        <div\n          class=\"placeholder\"\n          style=\"background-color: ${this.color};padding-top:${\n            this.height\n          };width:${this.width};\"\n        ></div>\n        ${\n          this.inviewed\n            ? html`\n                <img\n                  class=\"image\"\n                  width=\"100%\"\n                  data-loaded=\"${this.loaded}\"\n                  src=\"${this.src}\"\n                  alt=\"${this.alt}\"\n                  @load=\"${this.handleLoad}\"\n                />\n              `\n            : null\n        }\n      </div>\n    `;\n  }\n}\nwindow.customElements.define('wfc-photo-image', WfcPhotoImage);\n","import {LitElement, html, css} from 'lit-element';\nimport './wfc-photo-image.js';\n\nclass WfcPhotoItem extends LitElement {\n  static get styles() {\n    return css`\n      article {\n        margin: 0 0 16px;\n      }\n      @media (min-width: 640px) {\n        article {\n          margin-bottom: 60px;\n          padding-bottom: 24px;\n        }\n      }\n      @media (min-width: 640px) {\n        article {\n          border-radius: 3px;\n          border: 1px solid #e6e6e6;\n        }\n      }\n      .author {\n        padding: 0 16px;\n        line-height: 60px;\n        font-size: 14px;\n        font-weight: 600;\n      }\n      .image {\n        vertical-align: middle;\n        position: relative;\n      }\n      .title {\n        font-size: 14px;\n        margin: 16px 0 0;\n      }\n      .description {\n        font-size: 12px;\n        margin: 8px 0 0;\n      }\n      .time {\n        font-size: 10px;\n        color: #999;\n        margin: 8px 0 0;\n      }\n      .meta {\n        padding: 0 16px;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      url: {type: String},\n      color: {type: String},\n      title: {type: String},\n      description: {type: String},\n      author: {type: String},\n      width: {type: Number},\n      height: {type: Number},\n      postDatetime: {type: Number},\n    };\n  }\n\n  callback() {\n    console.log('callbc');\n  }\n\n  getDateString() {\n    const now = new Date();\n    const date = new Date(this.postDatetime);\n    const diff = now - date;\n    const SEC = 1000;\n    const MIN = SEC * 60;\n    const HOUR = MIN * 60;\n    const DAY = HOUR * 24;\n    switch (true) {\n      case diff < MIN:\n        return `${Math.floor(diff / SEC)}秒前`;\n      case diff < HOUR:\n        return `${Math.floor(diff / MIN)}分前`;\n      case diff < DAY:\n        return `${Math.floor(diff / HOUR)}時間前`;\n      case diff < DAY * 3:\n        return `${Math.floor(diff / DAY)}日前`;\n      default:\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${month}月${day}日`;\n    }\n  }\n\n  render() {\n    const ratio = `${(this.height / this.width) * 100}%`;\n    return html`\n      <article>\n        <header class=\"author\">${this.author}</header>\n        <div class=\"image\">\n          <wfc-photo-image\n            callback=\"${this.callback}\"\n            src=\"${this.url}\"\n            alt=\"${this.title}\"\n            color=\"${this.color}\"\n            width=\"100%\"\n            height=\"${ratio}\"\n          ></wfc-photo-image>\n        </div>\n        <div class=\"meta\">\n          <h3 class=\"title\">${this.title}</h3>\n          <p class=\"description\">${this.description}</p>\n          <p class=\"time\">${this.getDateString()}</p>\n        </div>\n      </article>\n    `;\n  }\n}\n\nwindow.customElements.define('wfc-photo-item', WfcPhotoItem);\n","import {LitElement, html, css} from 'lit-element';\nimport './wfc-loading.js';\nimport './wfc-photo-item.js';\n\nconst API_ORIGIN = 'https://wfc-2019.firebaseapp.com';\n\nconst fetchImagesByOffset = async offset => {\n  const response = await fetch(`${API_ORIGIN}/images?offset=${offset}`, {\n    mode: 'cors',\n  });\n  if (response.ok) {\n    const {data} = await response.json();\n    return data;\n  } else {\n    throw new Error('Failed to fetch api');\n  }\n};\n\nclass WfcPhotoList extends LitElement {\n  static get styles() {\n    return css`\n      .LoadMore {\n        height: 44px;\n        margin: 8px 0;\n        text-align: center;\n      }\n      button {\n        display: inline-block;\n        border-radius: 50%;\n        width: 44px;\n        border: none;\n        padding: 0;\n        margin: 0;\n        line-height: 44px;\n        background: #fff;\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.2);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      images: {type: Array},\n      loading: {type: Boolean},\n      end: {type: Boolean},\n      error: {type: Boolean},\n    };\n  }\n\n  constructor() {\n    super();\n    this.images = [];\n    this.loading = false;\n    this.error = false;\n    this.end = false;\n    this.init();\n  }\n\n  async init() {\n    this.fetchOffset();\n  }\n\n  async fetchOffset() {\n    if (this.loading) {\n      return;\n    }\n    this.loading = true;\n    const offset = this.images.length;\n    try {\n      const {images} = await fetchImagesByOffset(offset);\n      if (!images.length) {\n        this.end = true;\n      } else {\n        this.images.push(...images);\n      }\n    } catch (e) {\n      this.error = true;\n    }\n    this.loading = false;\n  }\n\n  handleClick() {\n    this.fetchOffset();\n  }\n\n  render() {\n    if (this.error) {\n      return html`\n        <p align=\"center\">\n          Sorry. Something went wrong. ;D<br />\n          Please reload this page.\n        </p>\n      `;\n    }\n\n    return html`\n      <section>\n        ${\n          !this.images.length\n            ? null\n            : this.images.map(\n                item => html`\n                  <wfc-photo-item\n                    color=\"${item.color}\"\n                    title=\"${item.title}\"\n                    description=\"${item.description}\"\n                    postDatetime=\"${item.postDatetime}\"\n                    url=\"${item.url}\"\n                    width=\"${item.width}\"\n                    height=\"${item.height}\"\n                    author=\"${item.author}\"\n                  ></wfc-photo-item>\n                `,\n              )\n        }\n      </section>\n      ${\n        this.end\n          ? null\n          : html`\n              <div class=\"LoadMore\">\n                ${\n                  this.loading\n                    ? html`\n                        <wfc-loading></wfc-loading>\n                      `\n                    : html`\n                        <button @click=\"${this.handleClick}\">↓</button>\n                      `\n                }\n              </div>\n            `\n      }\n    `;\n  }\n}\n\nwindow.customElements.define('wfc-photo-list', WfcPhotoList);\n","import { LitElement, html, css } from 'lit-element';\nimport './wfc-header.js';\nimport './wfc-photo-list.js';\n\nclass WfcApp extends LitElement {\n  static get styles() {\n    return css`\n      main {\n        max-width: 600px;\n        margin: 0 auto;\n        padding-bottom: 24px;\n        min-height: 50vh;\n      }\n      @media (min-width: 640px) {\n        main {\n          padding-top: 60px;\n          padding-bottom: 60px;\n        }\n      }\n      footer {\n        font-size: 10px;\n        color: #999;\n        text-align: center;\n        padding-bottom: 16px;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <wfc-header></wfc-header>\n      <main>\n        <wfc-photo-list></wfc-photo-list>\n      </main>\n      <footer>\n        Copyright © RyotaSugawara.github.io. All Rights Reserved.\n      </footer>\n    `;\n  }\n}\n\nwindow.customElements.define('wfc-app', WfcApp);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","endIndex","html","s","match","substr","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","l","text","v","Array","isArray","Symbol","iterator","t","setAttribute","_getValue","comitter","committer","directive","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","_hasConnected","performUpdate","then","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","host","define","color","width","height","src","alt","inviewed","loaded","unobserve","observer","IntersectionObserver","entry","isIntersecting","observe","disconnect","disconnectedCallback","handleLoad","url","title","description","author","postDatetime","log","now","Date","date","diff","SEC","floor","MIN","HOUR","DAY","getMonth","getDate","ratio","callback","getDateString","fetchImagesByOffset","async","response","fetch","offset","ok","json","images","loading","end","error","init","fetchOffset","handleClick"],"mappings":"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"}